- if answer.persisted?
  .card.answer id=("answer_#{answer.id}")
    .card-block
      p.card-text
        p id="answer_#{answer.id}_errors"
        = answer.body
        ul
        - answer.attachments.each do |a|
          li= link_to a.file.identifier, a.file.url
          - if can? :delete, a
            = link_to 'Remove', attachment_path(a), method: :delete

      .answer-vote-buttons
        = link_to vote_question_answer_path(answer.question, answer, value: true), method: :post, remote: true do
          p.glyphicon.glyphicon-arrow-up

        = link_to vote_question_answer_path(answer.question, answer, value: false), method: :post, remote: true do
          p.glyphicon.glyphicon-arrow-down

        = link_to unvote_question_answer_path(answer.question, answer), method: :delete, remote: true do
          p.glyphicon.glyphicon-remove

        p id = "answer_#{answer.id}_total_votes"
          |total:
          = answer.total_votes 

        p id = "answer_#{answer.id}_up_votes"
          |likes:
          = answer.up_votes   

        p id = "answer_#{answer.id}_down_votes"
          |dislikes:
          = answer.down_votes  

      - if answer.best?
        .font-weight-bold Best answer!
    - if can? :best, answer
      = link_to 'Best', best_question_answer_path(answer.question, answer), method: :patch, remote: true, class: ' btn btn-xs btn-success best-answer-link', data: {answer_id: answer.id}
    - if can?(:update, answer)
      = link_to 'Edit', '', class: 'btn btn-warning btn-xs edit-btn', data: { answer_id: answer.id }
      = link_to 'Delete', question_answer_path(@question, answer), method: :delete, remote: true, class: 'btn btn-danger btn-xs delete-button'
      = form_for [@question, answer], remote: true, html: {id: "edit-answer-#{answer.id}"} do |f|
        p= f.label :body
        p= f.text_area :body
        p= f.submit 'Update'
        
  - if user_signed_in?
      = render 'comments/form_answer', answer: answer

  div class=("answer-comments-#{answer.id}")
      - answer.comments.each do |comment|
        = render 'comments/comment', comment: comment

br




