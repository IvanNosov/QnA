- if answer.persisted?
  .card.answer id=("answer_#{answer.id}")
  
    - if answer.best?
        .font-weight-bold Best!
          i.material-icons done 
    p id="answer_#{answer.id}_errors"
    strong= answer.user.try(:email)
    p= answer.body
    - cache collection_relation_cache_key_for(:attachment, answer)
      ul
        - answer.attachments.each do |a|
          li= link_to a.file.identifier, a.file.url
          - if can? :delete, a
            = link_to 'Remove', attachment_path(a), method: :delete

    .card-footer
      .answer-vote-buttons
        = link_to vote_question_answer_path(answer.question, answer, value: true), method: :post, remote: true, class: 'mr-sm-2' do
          i.material-icons.md-18 thumb_up

        a id = "answer_#{answer.id}_total_votes"
          = answer.total_votes 
  
        = link_to vote_question_answer_path(answer.question, answer, value: false), method: :post, remote: true, class: 'mr-sm-2 ml-sm-2' do
          i.material-icons.md-18 thumb_down

        = link_to unvote_question_answer_path(answer.question, answer), method: :delete, remote: true, class: 'mr-sm-2' do
          i.material-icons.md-18 thumbs_up_down




      - if can? :best, answer
        = link_to 'Best', best_question_answer_path(answer.question, answer), method: :patch, remote: true, class: ' btn btn-xs btn-success best-answer-link mr-sm-2', data: {answer_id: answer.id}
      - if can?(:update, answer)
        = link_to 'Edit', '', class: 'btn btn-warning btn-xs edit-btn mr-sm-2', data: { answer_id: answer.id }
        = link_to 'Delete', question_answer_path(@question, answer), method: :delete, remote: true, class: 'btn btn-danger btn-xs delete-button mr-sm-2'
        = form_for [@question, answer], remote: true, html: {id: "edit-answer-#{answer.id}"} do |f|
          p= f.label :body
          p= f.text_area :body
          p= f.submit 'Update'
        
/     - if user_signed_in?
/       = render 'comments/form_answer', answer: answer

/   div class=("answer-comments-#{answer.id}")
/       - answer.comments.each do |comment|
/         = render 'comments/comment', comment: comment

/ br




